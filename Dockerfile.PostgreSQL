# Use the official PostgreSQL image as the base image
FROM postgres:latest

# Set environment variables for PostgreSQL configuration
# You can adjust these as needed
ENV POSTGRES_USER myuser
ENV POSTGRES_PASSWORD mypassword
ENV POSTGRES_DB mydb

# Expose the default PostgreSQL port
EXPOSE 5432

# Create a volume for persistent data storage
# This allows the database data to persist even if the container is stopped or removed
VOLUME /var/lib/postgresql/data

# Copy initialization scripts (if you have any) to be executed after the database starts
# For example, you might have SQL scripts to create tables or seed data
# COPY ./init-scripts/ /docker-entrypoint-initdb.d/

# The base PostgreSQL image already handles starting the database service
# when the container runs. No explicit CMD is needed here for a basic setup.

# --- Optional: Add extensions or other dependencies if required ---
# Example: Install the 'unaccent' extension
# RUN apt-get update && apt-get install -y postgresql-contrib

# --- Optional: Configure PostgreSQL settings ---
# Example: Adjust the postgresql.conf file
# COPY ./postgresql.conf /etc/postgresql/postgresql.conf
# Example: Adjust the pg_hba.conf file for access control
# COPY ./pg_hba.conf /etc/postgresql/pg_hba.conf

# Documentation:
# - This Dockerfile uses the official 'postgres:latest' image from Docker Hub,
#   which is a well-maintained and secure base for PostgreSQL.
# - Environment variables are used to set the default PostgreSQL user, password,
#   and database name. You can override these during container startup if needed
#   using the '-e' flag with 'docker run'.
# - The 'EXPOSE 5432' instruction documents the port PostgreSQL listens on.
# - The 'VOLUME /var/lib/postgresql/data' creates a named volume (or allows
#   binding to a host directory) for storing the database files. It's crucial
#   for data persistence.
# - The '/docker-entrypoint-initdb.d/' directory is a special directory in the
#   official PostgreSQL image. Any '.sh' or '.sql' scripts placed here will be
#   executed after the database is initialized. Uncomment and adjust the 'COPY'
#   instruction if you have initialization scripts.
# - The optional sections demonstrate how you could install PostgreSQL extensions
#   or provide custom configuration files for 'postgresql.conf' and 'pg_hba.conf'.
#   Uncomment and modify these sections according to your needs.

# How to build this Docker image:
# 1. Save the content above as a file named 'Dockerfile' in your project directory.
# 2. Open your terminal in that directory.
# 3. Run the command: 'docker build -t my-postgres-image .'
#    - 'docker build' is the command to build a Docker image.
#    - '-t my-postgres-image' tags the image with the name 'my-postgres-image'.
#    - '.' specifies the build context (the current directory).

# How to run a container from this image:
# 1. Run the command:
#    'docker run --name my-postgres-container -p 5432:5432 -v postgres_data:/var/lib/postgresql/data -e POSTGRES_PASSWORD=securepassword my-postgres-image'
#    - 'docker run' is the command to run a container.
#    - '--name my-postgres-container' assigns a name to the container.
#    - '-p 5432:5432' maps the host's port 5432 to the container's port 5432,
#      allowing you to access PostgreSQL from your host.
#    - '-v postgres_data:/var/lib/postgresql/data' creates a named volume 'postgres_data'
#      and mounts it to the database data directory in the container for persistence.
#      Alternatively, you can bind-mount a host directory like '-v /path/on/host:/var/lib/postgresql/data'.
#    - '-e POSTGRES_PASSWORD=securepassword' overrides the default password set in the
#      Dockerfile. **It's highly recommended to set a strong password when running the container.**
#    - 'my-postgres-image' specifies the image to run.

# Important Notes:
# - **Security:** Always set a strong and unique password when running your PostgreSQL container.
# - **Data Persistence:** The use of a volume is crucial for ensuring that your database data is not lost when the container is stopped or removed.
# - **Initialization Scripts:** If you have SQL scripts to initialize your database schema or data, place them in a directory (e.g., 'init-scripts/') and uncomment the 'COPY' instruction. They will be executed automatically on the first run of the container.
# - **Custom Configuration:** If you need to customize PostgreSQL settings beyond the environment variables, you can provide your own 'postgresql.conf' and 'pg_hba.conf' files and copy them into the container.